generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
  COURSEADMIN
  ADMIN
}

enum TicketStatus {
  UNCLAIMED
  CLAIMED
  DONE
  CLOSED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followers User[]   @relation("follows")
  following User[]   @relation("follows")

  profile          Profile?
  messages         Message[]
  chatrooms        Chatroom[]
  courses          Enrolment[]
  chat             Chat[]
  boards           Board[]
  notes            Note[]
  starredResources StarredResource[]
}

model Profile {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  bio        String?
  profilePic String?
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chatroom {
  userId   String
  chatId   String
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Chat {
  id        String        @id @default(uuid())
  name      String
  status    TicketStatus?
  claimedBy String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user      User?      @relation(fields: [claimedBy], references: [id])
  messages  Message[]
  chatrooms Chatroom[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  chatId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String   @id @default(uuid())
  name        String   @unique
  category    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrolment Enrolment[]
  chatrooms Chatroom[]
  boards    Board[]
  notes     Note[]
}

model Enrolment {
  role      Role
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Board {
  id         String     @id @default(uuid())
  name       String     @default("Untitled")
  visibility Visibility @default(PUBLIC)
  courseId   String
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  course       Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardColumns BoardColumn[]
  stars        StarredResource[]
}

model BoardColumn {
  id        String   @id @default(uuid())
  title     String
  position  Int
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board           Board            @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardColumnRows BoardColumnRow[]
}

model BoardColumnRow {
  id            String   @id @default(uuid())
  title         String
  content       String
  position      Int
  boardColumnId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  boardColumn BoardColumn @relation(fields: [boardColumnId], references: [id], onDelete: Cascade)
}

model Note {
  id         String     @id @default(uuid())
  title      String     @default("Untitled")
  content    String
  visibility Visibility @default(PUBLIC)
  courseId   String
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  course Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  stars  StarredResource[]
}

model StarredResource {
  id        String   @id @default(uuid())
  boardId   String?
  noteId    String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board? @relation(fields: [boardId], references: [id], onDelete: Cascade)
  note  Note?  @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@unique([noteId, userId])
}
