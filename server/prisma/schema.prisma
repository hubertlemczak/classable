generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
  COURSEADMIN
  ADMIN
}

enum TicketStatus {
  UNCLAIMED
  CLAIMED
  DONE
  CLOSED
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followers User[]   @relation("follows")
  following User[]   @relation("follows")

  profile   Profile?
  messages  Message[]
  chatrooms Chatroom[]
  courses   Enrolment[]
  chat      Chat[]
}

model Profile {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  bio       String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chatroom {
  userId   String
  chatId   String
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Chat {
  id        String        @id @default(uuid())
  name      String
  status    TicketStatus?
  claimedBy String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user      User?      @relation(fields: [claimedBy], references: [id])
  messages  Message[]
  chatrooms Chatroom[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  chatId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String   @id @default(uuid())
  name        String
  category    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrolment Enrolment[]
  chatrooms Chatroom[]
}

model Enrolment {
  name      String
  role      Role
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}
